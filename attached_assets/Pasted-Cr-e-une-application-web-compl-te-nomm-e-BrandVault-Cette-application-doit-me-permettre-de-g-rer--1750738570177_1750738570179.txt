Cr√©e une application web compl√®te nomm√©e "BrandVault". Cette application doit me permettre de g√©rer tout le branding d'une ou plusieurs de mes applications ou projets.

Voici les exigences :

üß© 1. Fonctionnalit√©s principales √† inclure :
A. Espace de gestion de branding :
Enregistrement et modification des √©l√©ments de marque :

Nom du projet

Slogan / tagline

Logo (upload et preview)

Charte de couleurs (codes hexad√©cimaux, nom de chaque couleur, usage recommand√©)

Typographie principale et secondaire (nom de la police, style, lien Google Fonts si disponible)

Ic√¥nes et visuels associ√©s

Ton de voix et lignes √©ditoriales

B. G√©n√©ration automatique :
G√©n√©rer des fichiers de configuration CSS/SCSS contenant toutes les variables de style

G√©n√©rer un fichier README.md documentant la charte graphique

G√©n√©rer une preview interactive de la charte (style guide live)

C. Authentification :
Interface de connexion/inscription s√©curis√©e (JWT ou autre syst√®me moderne)

Syst√®me de r√¥les (admin, contributeur, viewer)

Page de profil utilisateur

D. Dashboard :
Liste des projets avec possibilit√© de cr√©ation, duplication, archivage

Filtres et recherche

Gestion d‚Äô√©quipe (inviter des membres √† collaborer sur un branding)

E. Export :
Export en formats : PDF, JSON, CSS, SCSS, FIGMA tokens (si possible)

Possibilit√© de synchronisation avec Figma, Notion, ou Google Drive

üé® 2. Design :
Utilise Material Design (Google CSS framework) pour toute l'interface.

L‚Äôinterface doit √™tre moderne, minimaliste et responsive.

Chaque composant doit suivre les principes UX/UI de Google.

üõ†Ô∏è 3. Technologies recommand√©es :
Frontend : React.js + Tailwind (optionnel), ou pure Material UI

Backend : Node.js (Express) ou Python (FastAPI)

Base de donn√©es : MongoDB ou PostgreSQL

Authentification : JWT ou Auth0

API RESTful document√©e avec Swagger

üß™ 4. V√©rification qualit√© :
V√©rifie et corrige tous les bugs potentiels

√âcrit des tests unitaires et d‚Äôint√©gration pour toutes les fonctions critiques

Assure une validation front-end (formulaires, uploads, champs obligatoires)

Ajoute des messages d'erreur clairs et UX-friendly

üì¶ 5. Bonus (optionnel mais utile) :
G√©n√©rateur de moodboard √† partir des couleurs/images/logo

Int√©gration d‚Äôune API d‚ÄôIA qui propose des am√©liorations de branding

Historique des modifications

Mode sombre / clair

Rends le code bien structur√©, comment√© et pr√™t √† d√©ployer. Fournis les instructions d‚Äôinstallation et les commandes pour ex√©cuter en local.